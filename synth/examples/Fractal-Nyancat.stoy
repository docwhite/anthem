/*!
 * <info>
 * <author>iq [ https://www.shadertoy.com/user/iq ]</author>
 * <name>Fractal Nyancat</name>
 * 
 * <description>
 *   Instead of using a mathematically defined shape for orbit trapping in fractals,
 *   a bitmap can be used just as easily ^_^
 * </description>
 * 
 * <url>https://www.shadertoy.com/view/4slGWH</url>
 * 
 * <date>2013-05-18</date>
 * 
 * <tags>2d, fractal, julia, orbittrap, orbit, nyancat</tags>
 * 
 * <synthclipse-importer-legal-note>
 *   As noted in: [ https://www.shadertoy.com/terms ]:
 *   If the author did not stated otherwise, this shader is licensed under
 *   Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License 
 *   [ http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US ].
 * </synthclipse-importer-legal-note>
 * </info>
 */

uniform vec3      iResolution;           // viewport resolution (in pixels)
uniform float     iGlobalTime;           // shader playback time (in seconds)
uniform float     iTimeDelta;            // render time (in seconds)
uniform int       iFrame;                // shader playback frame
uniform float     iChannelTime[4];       // channel playback time (in seconds)
uniform vec3      iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4      iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4      iDate;                 // (year, month, day, time in seconds)
uniform float     iSampleRate;           // sound sample rate (i.e., 44100)
uniform sampler2D iChannel0; //! texture["Shadertoy/res/tex14.png", wrap: GL_CLAMP_TO_EDGE, mipmap: false, filter: GL_NEAREST]
uniform sampler2D iChannel1; //! WARNING: Unknown input type: "musicstream". Source: "Shadertoy/res/nyan-cat-2"

// Created by inigo quilez - iq/2013
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.

// Instead of using a pont, circle, line or any mathematical shape for traping the orbit
// of fc(z), one can use any arbitrary shape. For example, a NyanCat :)
//
// I invented this technique more than 10 years ago (can have a look to those experiments 
// here http://www.iquilezles.org/www/articles/ftrapsbitmap/ftrapsbitmap.htm).

vec4 getNyanCatColor( vec2 p, float time )
{
	p = clamp(p,0.0,1.0);
	p.x = p.x*40.0/256.0;
	p.y = 0.5 + 1.2*(0.5-p.y);
	p = clamp(p,0.0,1.0);
	float fr = floor( mod( 20.0*time, 6.0 ) );
	p.x += fr*40.0/256.0;
	return texture2D( iChannel0, p );
}

void mainImage( inout vec4 fragColor, in vec2 fragCoord )
{
	vec2 p = -1.0+2.0*fragCoord.xy / iResolution.xy;
	p.x *= iResolution.x/iResolution.y;

    float time = iGlobalTime;
    time = max( time-5.5, 0.0 );
    
    // zoom	
	p = vec2(0.5,-0.05)  + p*0.75 * pow( 0.9, 20.0*(0.5+0.5*cos(0.25*time)) );
	
    vec4 col = vec4(0.0);
	vec3 s = mix( vec3( 0.2,0.2, 1.0 ), vec3( 0.5,-0.2,0.5), 0.5+0.5*sin(0.5*time) );

    // iterate Jc	
	vec2 c = vec2(-0.76, 0.15);
	float f = 0.0;
	vec2 z = p;
	for( int i=0; i<100; i++ )
	{
		if( (dot(z,z)>4.0) || (col.w>0.1) ) continue; // break;

        // fc(z) = zÂ² + c		
		z = vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y) + c;
		
		col = getNyanCatColor( s.xy + s.z*z, time );
		f += 1.0;
	}
	
	vec3 bg = 0.5*vec3(1.0,0.5,0.5) * sqrt(f/100.0);
	
	col.xyz = mix( bg, col.xyz, col.w );
    
    col *= step( 2.0, iGlobalTime );
    col += texture2D( iChannel1, vec2(0.01,0.2) ).x * (1.0-step( 5.5, iGlobalTime ));
	
	fragColor = vec4( col.xyz,1.0);
}

void main() {
	vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
	mainImage(color, gl_FragCoord.xy);

	gl_FragColor = color;
}